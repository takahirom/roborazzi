plugins {
  id "org.jetbrains.kotlin.jvm"
  id 'jvm-test-suite'
}
if (System.getenv("INTEGRATION_TEST") != "true") {
  pluginManager.apply("com.vanniktech.maven.publish")
}

apply plugin: 'java-gradle-plugin'

def integrationTestDep = sourceSets.create('integrationTestDep')

dependencies {
  compileOnly gradleApi()
  compileOnly libs.android.tools.build.gradle
  compileOnly libs.kotlin.gradle.plugin
  implementation(project(':roborazzi-core')) {
    // We don't use junit for plugin
    exclude group: 'junit', module: 'junit'
  }
  implementation libs.kotlinx.serialization.json
  implementation libs.webjars.locator.lite
  implementation libs.webjars.materialize
  implementation libs.webjars.material.design.icons
  integrationTestDepImplementation libs.android.tools.build.gradle
  integrationTestDepImplementation libs.kotlin.gradle.plugin
  integrationTestDepImplementation libs.compose.gradle.plugin
  testImplementation libs.kotlin.test
  testImplementation libs.kotlin.test.junit
  testImplementation libs.junit
}

sourceSets {
  main.java.srcDir 'src/generated/kotlin'
}

test {
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    showStandardStreams = true
    showStackTraces = true
    exceptionFormat = 'full'
  }
}


testing.suites {
  integrationTest(JvmTestSuite) {
    useJUnit()
    sources.kotlin.srcDirs = ["src/integrationTest/java"]
    sources.java.srcDirs = ["src/integrationTest/java"]
    dependencies {
//      implementation project()
      implementation gradleTestKit()
      implementation project(':roborazzi-core')
      implementation libs.junit
      implementation libs.android.tools.build.gradle
      implementation libs.kotlin.gradle.plugin
      implementation libs.compose.gradle.plugin
    }

    targets {
      all {
        testTask.configure {
          shouldRunAfter(test)
          testLogging {
            events "failed", "standardError"
            showStandardStreams = true
            showStackTraces = true
            exceptionFormat = 'full'
          }
        }
      }
    }
    tasks.withType(PluginUnderTestMetadata.class).named("pluginUnderTestMetadata").configure {
      it.pluginClasspath.from(integrationTestDep.runtimeClasspath)
    }
  }
}

gradlePlugin {
  testSourceSets sourceSets.integrationTest
}

gradlePlugin {
  plugins {
    roborazzi {
      id = 'io.github.takahirom.roborazzi'
      implementationClass = 'io.github.takahirom.roborazzi.RoborazziPlugin'
    }
  }
}


tasks.named('check') {
  dependsOn(testing.suites.integrationTest)
}

