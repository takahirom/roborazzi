plugins {
  id "org.jetbrains.kotlin.jvm" version libs.versions.kotlin apply false
  id 'org.jetbrains.kotlin.multiplatform' version libs.versions.kotlin apply false
  id 'org.jetbrains.kotlin.plugin.compose' version libs.versions.kotlin apply false
  id 'com.android.library' version libs.versions.agp apply false
  id "com.vanniktech.maven.publish" version libs.versions.mavenPublish apply false
}

// BuildFusService conflicts are now handled via gradle.properties
// kotlin.internal.collectFUSMetrics=false

allprojects {
  // Apply the same Java compatibility for each module
  def javaVersion = libs.versions.javaTarget.get()
  def toolchainVersion = libs.versions.javaToolchain.get()

  def javaTargetVersion = JavaVersion.toVersion(javaVersion)
  def jvmTargetVersion = org.jetbrains.kotlin.gradle.dsl.JvmTarget.@Companion.fromTarget(javaVersion)

  plugins.withId("java") {
    java {
      toolchain {
        languageVersion.set(JavaLanguageVersion.of(toolchainVersion))
      }
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach {
    android {
      compileOptions {
        sourceCompatibility javaTargetVersion
        targetCompatibility javaTargetVersion
      }
    }
  }

  tasks.withType(org.gradle.api.tasks.compile.JavaCompile).configureEach {
    sourceCompatibility = javaTargetVersion
    targetCompatibility = javaTargetVersion
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    compilerOptions {
      jvmTarget.set(jvmTargetVersion)
    }
  }

  plugins.withId('com.vanniktech.maven.publish') {
    project.group = "io.github.takahirom.roborazzi"
    mavenPublishing {
      publishToMavenCentral(com.vanniktech.maven.publish.SonatypeHost.CENTRAL_PORTAL)
      signAllPublications()
    }

    plugins.withId('maven-publish') {
      publishing {
        repositories {
          maven {
            name = "LocalMaven"
            url = file("${rootProject.buildDir}/localMaven").toURI().toString()
          }
          def internalUrl = providers.gradleProperty("internalUrl")
          if (internalUrl.isPresent()) {
            maven {
              name = "internal"
              url = internalUrl
              credentials {
                username = providers.gradleProperty("internalUsername").get()
                password = providers.gradleProperty("internalPassword").get()
              }
            }
          }
        }
      }
    }
  }
}
