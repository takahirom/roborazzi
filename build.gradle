plugins {
  id 'com.android.application' version libs.versions.agp apply false
  id 'com.android.library' version libs.versions.agp apply false
  id 'org.jetbrains.kotlin.multiplatform' version libs.versions.kotlin apply false
  id 'org.jetbrains.compose' version libs.versions.composeMultiplatform apply false

  id 'org.jetbrains.kotlin.android' version libs.versions.kotlin apply false
  id "com.vanniktech.maven.publish" version libs.versions.mavenPublish apply false
  // Just for Gradle Build, included build will be applied
  id("io.github.takahirom.roborazzi") version "1.0.0" apply false
}

allprojects {
  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
      freeCompilerArgs += "-Xopt-in=com.github.takahirom.roborazzi.InternalRoborazziApi"
      freeCompilerArgs += "-Xopt-in=com.github.takahirom.roborazzi.ExperimentalRoborazziApi"
    }
  }

  plugins.withId('com.vanniktech.maven.publish') {
    project.group = "io.github.takahirom.roborazzi"
    mavenPublishing {
      publishToMavenCentral(com.vanniktech.maven.publish.SonatypeHost.S01)
      signAllPublications()
    }

    plugins.withId('maven-publish') {
      publishing {
        repositories {
          maven {
            name = "LocalMaven"
            url = file("${rootProject.buildDir}/localMaven").toURI().toString()
          }
          def internalUrl = providers.gradleProperty("internalUrl")
          if (internalUrl.isPresent()) {
            maven {
              name = "internal"
              url = internalUrl
              credentials {
                username = providers.gradleProperty("internalUsername").get()
                password = providers.gradleProperty("internalPassword").get()
              }
            }
          }
        }
      }
    }
  }
}
