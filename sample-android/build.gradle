plugins {
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
  id 'org.jetbrains.kotlin.plugin.compose'
  id 'io.github.takahirom.roborazzi'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
  localPropertiesFile.withInputStream { instream ->
    localProperties.load(instream)
  }
}

android {
  namespace 'com.github.takahirom.roborazzi.sample'
  compileSdk = libs.versions.compileSdk.get().toInteger()

  defaultConfig {
    minSdk = libs.versions.minSdk.get().toInteger()
    targetSdk = libs.versions.targetSdk.get().toInteger()

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  buildFeatures {
    viewBinding true
  }
  testOptions {
    unitTests {
      includeAndroidResources = true
      it.all {
        environment "robolectric.logging.enabled", "true"
        if (localProperties.getProperty("gemini_api_key") != null) {
          environment "gemini_api_key", localProperties.getProperty("gemini_api_key")
        }
        if (localProperties.getProperty("openai_api_key") != null) {
          environment "openai_api_key", localProperties.getProperty("openai_api_key")
        }
        if (localProperties.getProperty("azure_openai_api_key") != null) {
          environment "azure_openai_api_key", localProperties.getProperty("azure_openai_api_key")
          environment "azure_openai_base_url", localProperties.getProperty("azure_openai_base_url")
          environment "azure_openai_api_version", localProperties.getProperty("azure_openai_api_version")
          environment "azure_openai_model", localProperties.getProperty("azure_openai_model")
        }
        // To run coverage report in Android Studio
        jvmArgs '-noverify'
        // Set the max heap size for the tests JVM(s)
        maxHeapSize = "4g"
      }
    }
  }
}

dependencies {
  testImplementation project(":roborazzi")
  testImplementation project(":roborazzi-ai-gemini")
  testImplementation(project(":roborazzi-ai-openai"))
  testImplementation project(":roborazzi-compose")
  testImplementation project(":roborazzi-junit-rule")
  testImplementation project(":roborazzi-accessibility-check")

  implementation libs.androidx.compose.material3
  implementation libs.androidx.compose.ui
  implementation libs.androidx.compose.foundation
  testImplementation libs.androidx.compose.ui.test.junit4
  debugImplementation libs.androidx.compose.ui.test.manifest
  implementation libs.androidx.activity.compose
  testImplementation(libs.webp.imageio)

  implementation libs.androidx.core.ktx
  implementation libs.androidx.appcompat
  implementation libs.google.android.material
  implementation libs.androidx.constraintlayout
  implementation libs.androidx.navigation.fragment.ktx
  implementation libs.androidx.navigation.ui.ktx

  testImplementation libs.junit
  testImplementation libs.androidx.test.ext.junit.ktx
  androidTestImplementation libs.androidx.test.ext.junit
  testImplementation libs.androidx.compose.material
  testImplementation libs.androidx.test.espresso.core
  testImplementation libs.androidx.test.core.ktx
  testImplementation libs.robolectric
  testImplementation(libs.kim)
}