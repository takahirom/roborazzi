package com.github.takahirom.roborazzi

import org.robolectric.RuntimeEnvironment
import sergio.sastre.composable.preview.scanner.android.AndroidPreviewInfo
import sergio.sastre.composable.preview.scanner.android.screenshotid.AndroidPreviewScreenshotIdBuilder
import sergio.sastre.composable.preview.scanner.core.preview.ComposablePreview

@ExperimentalRoborazziApi
fun ComposablePreview<AndroidPreviewInfo>.captureRoboImage(
  filePath: String = DefaultFileNameGenerator.generateFilePath("png"),
  roborazziOptions: RoborazziOptions = RoborazziOptions(),
) {
  val composablePreview = this
  composablePreview.applyToRobolectricConfiguration()
  captureRoboImage(filePath = filePath, roborazziOptions = roborazziOptions) {
    composablePreview()
  }
}

@ExperimentalRoborazziApi
interface RobolectricPreviewCapturer {
  fun capture(
    preview: ComposablePreview<AndroidPreviewInfo>,
  )
}

@InternalRoborazziApi
class DefaultRobolectricPreviewCapturer : RobolectricPreviewCapturer {
  override fun capture(preview: ComposablePreview<AndroidPreviewInfo>) {
    RuntimeEnvironment.setQualifiers(RobolectricDeviceQualifiers.Pixel4a)
    val pathPrefix =
      if (roborazziRecordFilePathStrategy() == RoborazziRecordFilePathStrategy.RelativePathFromCurrentDirectory) {
        roborazziSystemPropertyOutputDirectory() + java.io.File.separator
      } else {
        ""
      }
    val filePath = pathPrefix + createScreenshotIdFor(preview) + ".png"
    preview.captureRoboImage(filePath)
  }

  private fun createScreenshotIdFor(preview: ComposablePreview<AndroidPreviewInfo>) =
    AndroidPreviewScreenshotIdBuilder(preview)
      .ignoreClassName()
      .build()
}

@InternalRoborazziApi
fun capturePreviewWithAutoGeneratedTests(preview: ComposablePreview<AndroidPreviewInfo>) {
  val robolectricCapturerClass =
    System.getProperty("roborazzi.generateRobolectricPreview.capturer.classFQDN", null)
  if (robolectricCapturerClass != null) {
    val capturerClass = Class.forName(robolectricCapturerClass)
    if (!RobolectricPreviewCapturer::class.java.isAssignableFrom(capturerClass)) {
      throw IllegalArgumentException("The class $robolectricCapturerClass must implement RobolectricPreviewCapturer")
    }
    val capturer = capturerClass.getDeclaredConstructor().newInstance() as RobolectricPreviewCapturer
    capturer.capture(preview)
  } else {
    DefaultRobolectricPreviewCapturer().capture(preview)
  }
}
